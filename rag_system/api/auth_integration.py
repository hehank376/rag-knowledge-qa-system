#!/usr/bin/env python3
"""
认证系统集成模块
"""

from typing import Dict, Any, Optional
from fastapi import FastAPI, Request, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from ..services.user_service import UserService
from ..middleware.auth_middleware import init_auth_middleware, get_auth_middleware
from ..database.connection import init_database
from ..utils.logging_config import get_simple_logger as get_logger
from ..utils.exceptions import (
    AuthenticationError, AuthorizationError, ValidationError,
    NotFoundError, ConflictError, RAGSystemException
)

logger = get_logger(__name__)

class AuthIntegration:
    """认证系统集成器"""
    
    def __init__(self, app: FastAPI, config: Dict[str, Any]):
        self.app = app
        self.config = config
        self.user_service: Optional[UserService] = None
        self.auth_enabled = config.get('auth_enabled', False)
        
    async def initialize(self):
        """初始化认证系统"""
        try:
            if not self.auth_enabled:
                logger.info("认证系统已禁用，跳过初始化")
                return
            
            # 初始化数据库
            database_url = self.config.get('database_url', 'sqlite:///./rag_system.db')\n            await init_database(database_url)\n            \n            # 初始化用户服务\n            user_config = {\n                'jwt_secret': self.config.get('jwt_secret', 'your-secret-key-here'),\n                'jwt_algorithm': self.config.get('jwt_algorithm', 'HS256'),\n                'jwt_expiration_hours': self.config.get('jwt_expiration_hours', 24),\n                'session_expiration_hours': self.config.get('session_expiration_hours', 168),\n                'max_login_attempts': self.config.get('max_login_attempts', 5),\n                'lockout_duration_minutes': self.config.get('lockout_duration_minutes', 30)\n            }\n            \n            self.user_service = UserService(user_config)\n            await self.user_service.initialize()\n            \n            # 初始化认证中间件\n            auth_middleware = init_auth_middleware(self.user_service)\n            auth_middleware.set_enabled(self.auth_enabled)\n            \n            # 注册用户管理API路由\n            await self._register_auth_routes()\n            \n            # 添加异常处理器\n            self._add_exception_handlers()\n            \n            # 添加CORS中间件（如果需要）\n            if self.config.get('enable_cors', True):\n                self._add_cors_middleware()\n            \n            logger.info("认证系统初始化完成")\n            \n        except Exception as e:\n            logger.error(f"认证系统初始化失败: {str(e)}")\n            raise\n    \n    async def _register_auth_routes(self):\n        """注册认证相关路由"""\n        try:\n            from .user_api import router as user_router\n            \n            # 注册用户管理路由\n            self.app.include_router(user_router)\n            \n            logger.info("认证路由注册完成")\n            \n        except Exception as e:\n            logger.error(f"认证路由注册失败: {str(e)}")\n            raise\n    \n    def _add_exception_handlers(self):\n        """添加异常处理器"""\n        \n        @self.app.exception_handler(AuthenticationError)\n        async def authentication_exception_handler(request: Request, exc: AuthenticationError):\n            return JSONResponse(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                content={\n                    "error": "authentication_error",\n                    "message": str(exc),\n                    "error_code": exc.error_code\n                },\n                headers={"WWW-Authenticate": "Bearer"}\n            )\n        \n        @self.app.exception_handler(AuthorizationError)\n        async def authorization_exception_handler(request: Request, exc: AuthorizationError):\n            return JSONResponse(\n                status_code=status.HTTP_403_FORBIDDEN,\n                content={\n                    "error": "authorization_error",\n                    "message": str(exc),\n                    "error_code": exc.error_code\n                }\n            )\n        \n        @self.app.exception_handler(ValidationError)\n        async def validation_exception_handler(request: Request, exc: ValidationError):\n            return JSONResponse(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                content={\n                    "error": "validation_error",\n                    "message": str(exc),\n                    "error_code": exc.error_code\n                }\n            )\n        \n        @self.app.exception_handler(NotFoundError)\n        async def not_found_exception_handler(request: Request, exc: NotFoundError):\n            return JSONResponse(\n                status_code=status.HTTP_404_NOT_FOUND,\n                content={\n                    "error": "not_found_error",\n                    "message": str(exc),\n                    "error_code": exc.error_code\n                }\n            )\n        \n        @self.app.exception_handler(ConflictError)\n        async def conflict_exception_handler(request: Request, exc: ConflictError):\n            return JSONResponse(\n                status_code=status.HTTP_409_CONFLICT,\n                content={\n                    "error": "conflict_error",\n                    "message": str(exc),\n                    "error_code": exc.error_code\n                }\n            )\n        \n        @self.app.exception_handler(RAGSystemException)\n        async def rag_system_exception_handler(request: Request, exc: RAGSystemException):\n            return JSONResponse(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                content={\n                    "error": "system_error",\n                    "message": str(exc),\n                    "error_code": exc.error_code\n                }\n            )\n        \n        logger.info("异常处理器添加完成")\n    \n    def _add_cors_middleware(self):\n        """添加CORS中间件"""\n        self.app.add_middleware(\n            CORSMiddleware,\n            allow_origins=self.config.get('cors_origins', ["*"]),\n            allow_credentials=True,\n            allow_methods=["*"],\n            allow_headers=["*"],\n        )\n        logger.info("CORS中间件添加完成")\n    \n    def get_user_service(self) -> Optional[UserService]:\n        """获取用户服务实例"""\n        return self.user_service\n    \n    def is_auth_enabled(self) -> bool:\n        """检查认证是否启用"""\n        return self.auth_enabled\n    \n    def enable_auth(self):\n        """启用认证"""\n        self.auth_enabled = True\n        if hasattr(self, 'user_service') and self.user_service:\n            auth_middleware = get_auth_middleware()\n            auth_middleware.set_enabled(True)\n        logger.info("认证系统已启用")\n    \n    def disable_auth(self):\n        """禁用认证"""\n        self.auth_enabled = False\n        if hasattr(self, 'user_service') and self.user_service:\n            auth_middleware = get_auth_middleware()\n            auth_middleware.set_enabled(False)\n        logger.info("认证系统已禁用")\n    \n    async def cleanup(self):\n        """清理资源"""\n        try:\n            if self.user_service:\n                # 清理过期会话\n                await self.user_service.cleanup_expired_sessions()\n            \n            logger.info("认证系统资源清理完成")\n            \n        except Exception as e:\n            logger.error(f"认证系统资源清理失败: {str(e)}")\n\n# 全局认证集成实例\n_auth_integration: Optional[AuthIntegration] = None\n\ndef get_auth_integration() -> Optional[AuthIntegration]:\n    """获取认证集成实例"""\n    return _auth_integration\n\nasync def init_auth_integration(app: FastAPI, config: Dict[str, Any]) -> AuthIntegration:\n    """初始化认证集成"""\n    global _auth_integration\n    _auth_integration = AuthIntegration(app, config)\n    await _auth_integration.initialize()\n    return _auth_integration\n\n# 便捷函数\ndef is_auth_enabled() -> bool:\n    """检查认证是否启用"""\n    integration = get_auth_integration()\n    return integration.is_auth_enabled() if integration else False\n\ndef get_current_user_service() -> Optional[UserService]:\n    """获取当前用户服务"""\n    integration = get_auth_integration()\n    return integration.get_user_service() if integration else None