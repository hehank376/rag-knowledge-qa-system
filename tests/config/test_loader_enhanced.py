"""
测试增强的配置加载器
"""
import os
import tempfile
import pytest
from pathlib import Path
from unittest.mock import patch

from rag_system.config.loader import ConfigLoader
from rag_system.utils.exceptions import ConfigurationError


class TestConfigLoader:
    """测试配置加载器"""
    
    def setup_method(self):
        """每个测试方法前的设置"""
        self.temp_dir = tempfile.mkdtemp()
        self.config_path = Path(self.temp_dir) / "test_config.yaml"
    
    def teardown_method(self):
        """每个测试方法后的清理"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_load_basic_config(self):
        """测试加载基本配置"""
        config_content = \"\"\"app:\n  name: \"Test RAG System\"\n  version: \"1.0.0\"\n  debug: true\n\ndatabase:\n  url: \"sqlite:///test.db\"\n  echo: false\n\nllm:\n  provider: \"openai\"\n  model: \"gpt-4\"\n  temperature: 0.1\n  max_tokens: 1000\n\nembeddings:\n  provider: \"openai\"\n  model: \"text-embedding-ada-002\"\n  chunk_size: 1000\n  chunk_overlap: 200\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        with patch.dict(os.environ, {\"OPENAI_API_KEY\": \"test-key\"}):\n            loader = ConfigLoader(str(self.config_path))\n            config = loader.load_config()\n        \n        assert config.app.name == \"Test RAG System\"\n        assert config.app.version == \"1.0.0\"\n        assert config.app.debug is True\n        assert config.database.url == \"sqlite:///test.db\"\n        assert config.llm.provider == \"openai\"\n        assert config.llm.model == \"gpt-4\"\n        assert config.embeddings.provider == \"openai\"\n    \n    def test_env_variable_replacement(self):\n        \"\"\"测试环境变量替换\"\"\"\n        config_content = \"\"\"app:\n  name: \"${APP_NAME:Default App}\"\n  debug: ${APP_DEBUG:false}\n\ndatabase:\n  url: \"${DATABASE_URL}\"\n\nllm:\n  provider: \"${LLM_PROVIDER:openai}\"\n  model: \"${LLM_MODEL}\"\n  api_key: \"${OPENAI_API_KEY}\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        env_vars = {\n            \"APP_NAME\": \"Test App\",\n            \"APP_DEBUG\": \"true\",\n            \"DATABASE_URL\": \"sqlite:///test.db\",\n            \"LLM_MODEL\": \"gpt-3.5-turbo\",\n            \"OPENAI_API_KEY\": \"test-api-key\"\n        }\n        \n        with patch.dict(os.environ, env_vars):\n            loader = ConfigLoader(str(self.config_path))\n            config = loader.load_config()\n        \n        assert config.app.name == \"Test App\"\n        assert config.app.debug is True\n        assert config.database.url == \"sqlite:///test.db\"\n        assert config.llm.model == \"gpt-3.5-turbo\"\n    \n    def test_env_variable_with_defaults(self):\n        \"\"\"测试带默认值的环境变量替换\"\"\"\n        config_content = \"\"\"app:\n  name: \"${UNDEFINED_VAR:Default Name}\"\n  debug: ${UNDEFINED_DEBUG:false}\n\nllm:\n  provider: \"${UNDEFINED_PROVIDER:openai}\"\n  temperature: ${UNDEFINED_TEMP:0.1}\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        with patch.dict(os.environ, {\"OPENAI_API_KEY\": \"test-key\"}):\n            loader = ConfigLoader(str(self.config_path))\n            config = loader.load_config()\n        \n        assert config.app.name == \"Default Name\"\n        assert config.app.debug is False\n        assert config.llm.provider == \"openai\"\n        assert config.llm.temperature == 0.1\n    \n    def test_config_validation_success(self):\n        \"\"\"测试配置验证成功\"\"\"\n        config_content = \"\"\"app:\n  name: \"Valid Config\"\n\nllm:\n  provider: \"openai\"\n  model: \"gpt-4\"\n  temperature: 0.5\n  max_tokens: 1000\n\nembeddings:\n  provider: \"openai\"\n  model: \"text-embedding-ada-002\"\n  chunk_size: 1000\n  chunk_overlap: 200\n\ndatabase:\n  url: \"sqlite:///test.db\"\n\nvector_store:\n  type: \"chroma\"\n  persist_directory: \"./test_chroma\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        with patch.dict(os.environ, {\"OPENAI_API_KEY\": \"test-key\"}):\n            loader = ConfigLoader(str(self.config_path))\n            config = loader.load_config()  # 应该不抛出异常\n            assert config.app.name == \"Valid Config\"\n    \n    def test_config_validation_unsupported_llm_provider(self):\n        \"\"\"测试不支持的LLM提供商验证\"\"\"\n        config_content = \"\"\"llm:\n  provider: \"unsupported_provider\"\n  model: \"some-model\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        loader = ConfigLoader(str(self.config_path))\n        \n        with pytest.raises(ConfigurationError) as exc_info:\n            loader.load_config()\n        \n        assert \"不支持的LLM提供商\" in str(exc_info.value)\n        assert \"unsupported_provider\" in str(exc_info.value)\n    \n    def test_config_validation_missing_api_key(self):\n        \"\"\"测试缺少API密钥的验证\"\"\"\n        config_content = \"\"\"llm:\n  provider: \"openai\"\n  model: \"gpt-4\"\n\nembeddings:\n  provider: \"siliconflow\"\n  model: \"some-model\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        loader = ConfigLoader(str(self.config_path))\n        \n        with pytest.raises(ConfigurationError) as exc_info:\n            loader.load_config()\n        \n        error_msg = str(exc_info.value)\n        assert \"需要API密钥\" in error_msg\n    \n    def test_config_validation_invalid_temperature(self):\n        \"\"\"测试无效温度参数的验证\"\"\"\n        config_content = \"\"\"llm:\n  provider: \"openai\"\n  model: \"gpt-4\"\n  temperature: 3.0  # 超出范围\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        with patch.dict(os.environ, {\"OPENAI_API_KEY\": \"test-key\"}):\n            loader = ConfigLoader(str(self.config_path))\n            \n            with pytest.raises(ConfigurationError) as exc_info:\n                loader.load_config()\n            \n            assert \"温度参数必须在0-2之间\" in str(exc_info.value)\n    \n    def test_config_validation_invalid_chunk_overlap(self):\n        \"\"\"测试无效分块重叠的验证\"\"\"\n        config_content = \"\"\"embeddings:\n  provider: \"openai\"\n  model: \"text-embedding-ada-002\"\n  chunk_size: 1000\n  chunk_overlap: 1000  # 等于分块大小\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        with patch.dict(os.environ, {\"OPENAI_API_KEY\": \"test-key\"}):\n            loader = ConfigLoader(str(self.config_path))\n            \n            with pytest.raises(ConfigurationError) as exc_info:\n                loader.load_config()\n            \n            assert \"分块重叠不能大于或等于分块大小\" in str(exc_info.value)\n    \n    def test_config_validation_pinecone_missing_config(self):\n        \"\"\"测试Pinecone缺少配置的验证\"\"\"\n        config_content = \"\"\"vector_store:\n  type: \"pinecone\"\n  # 缺少API密钥和环境配置\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        loader = ConfigLoader(str(self.config_path))\n        \n        with pytest.raises(ConfigurationError) as exc_info:\n            loader.load_config()\n        \n        error_msg = str(exc_info.value)\n        assert \"Pinecone向量存储需要API密钥\" in error_msg\n        assert \"Pinecone向量存储需要环境配置\" in error_msg\n    \n    def test_config_merge_priority(self):\n        \"\"\"测试配置合并优先级（环境变量优先）\"\"\"\n        config_content = \"\"\"app:\n  debug: false\n\nllm:\n  provider: \"openai\"\n  model: \"gpt-3.5-turbo\"\n\ndatabase:\n  url: \"sqlite:///config.db\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        env_vars = {\n            \"APP_DEBUG\": \"true\",\n            \"DATABASE_URL\": \"sqlite:///env.db\",\n            \"OPENAI_API_KEY\": \"test-key\"\n        }\n        \n        with patch.dict(os.environ, env_vars):\n            loader = ConfigLoader(str(self.config_path))\n            config = loader.load_config()\n        \n        # 环境变量应该覆盖配置文件\n        assert config.app.debug is True\n        assert config.database.url == \"sqlite:///env.db\"\n        # 配置文件中的值应该保持不变\n        assert config.llm.model == \"gpt-3.5-turbo\"\n    \n    def test_yaml_parsing_error(self):\n        \"\"\"测试YAML解析错误\"\"\"\n        invalid_yaml = \"\"\"app:\n  name: \"Test\n  # 缺少引号结束\n  debug: true\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(invalid_yaml)\n        \n        loader = ConfigLoader(str(self.config_path))\n        \n        with pytest.raises(ConfigurationError) as exc_info:\n            loader.load_config()\n        \n        assert \"YAML配置文件解析错误\" in str(exc_info.value)\n    \n    def test_missing_config_file(self):\n        \"\"\"测试配置文件不存在\"\"\"\n        non_existent_path = str(Path(self.temp_dir) / \"non_existent.yaml\")\n        loader = ConfigLoader(non_existent_path)\n        \n        # 应该使用默认配置，不抛出异常\n        config = loader.load_config()\n        assert config.app.name == \"RAG Knowledge QA System\"\n    \n    def test_validate_config_file_method(self):\n        \"\"\"测试validate_config_file方法\"\"\"\n        # 创建有效配置\n        valid_config = \"\"\"app:\n  name: \"Valid App\"\n\nllm:\n  provider: \"openai\"\n  model: \"gpt-4\"\n\nembeddings:\n  provider: \"openai\"\n  model: \"text-embedding-ada-002\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(valid_config)\n        \n        with patch.dict(os.environ, {\"OPENAI_API_KEY\": \"test-key\"}):\n            loader = ConfigLoader()\n            errors = loader.validate_config_file(str(self.config_path))\n            assert len(errors) == 0\n        \n        # 创建无效配置\n        invalid_config = \"\"\"llm:\n  provider: \"invalid_provider\"\n  model: \"some-model\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(invalid_config)\n        \n        loader = ConfigLoader()\n        errors = loader.validate_config_file(str(self.config_path))\n        assert len(errors) > 0\n        assert any(\"不支持的LLM提供商\" in error for error in errors)\n    \n    def test_get_validation_errors(self):\n        \"\"\"测试获取验证错误列表\"\"\"\n        config_content = \"\"\"llm:\n  provider: \"invalid_provider\"\n  temperature: 5.0  # 无效温度\n\nembeddings:\n  provider: \"invalid_embedding_provider\"\n  chunk_size: -100  # 无效分块大小\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        loader = ConfigLoader(str(self.config_path))\n        \n        try:\n            loader.load_config()\n        except ConfigurationError:\n            pass\n        \n        errors = loader.get_validation_errors()\n        assert len(errors) > 0\n        assert any(\"不支持的LLM提供商\" in error for error in errors)\n        assert any(\"温度参数必须在0-2之间\" in error for error in errors)\n    \n    def test_multi_platform_config(self):\n        \"\"\"测试多平台配置\"\"\"\n        config_content = \"\"\"app:\n  name: \"Multi-Platform RAG\"\n\nllm:\n  provider: \"siliconflow\"\n  model: \"Qwen/Qwen2.5-7B-Instruct\"\n  temperature: 0.7\n  max_tokens: 2000\n\nembeddings:\n  provider: \"siliconflow\"\n  model: \"BAAI/bge-large-zh-v1.5\"\n  batch_size: 50\n  dimensions: 1024\n\nvector_store:\n  type: \"chroma\"\n  persist_directory: \"./multi_platform_chroma\"\n\nollama:\n  base_url: \"http://localhost:11434\"\n\"\"\"\n        \n        with open(self.config_path, 'w', encoding='utf-8') as f:\n            f.write(config_content)\n        \n        env_vars = {\n            \"SILICONFLOW_API_KEY\": \"test-siliconflow-key\"\n        }\n        \n        with patch.dict(os.environ, env_vars):\n            loader = ConfigLoader(str(self.config_path))\n            config = loader.load_config()\n        \n        assert config.app.name == \"Multi-Platform RAG\"\n        assert config.llm.provider == \"siliconflow\"\n        assert config.llm.model == \"Qwen/Qwen2.5-7B-Instruct\"\n        assert config.embeddings.provider == \"siliconflow\"\n        assert config.embeddings.model == \"BAAI/bge-large-zh-v1.5\"\n        assert config.embeddings.batch_size == 50\n        assert config.embeddings.dimensions == 1024\n    \n    def test_environment_specific_config_loading(self):\n        \"\"\"测试环境特定的配置加载\"\"\"\n        # 创建开发环境配置\n        dev_config_path = Path(self.temp_dir) / \"config\" / \"development.yaml\"\n        dev_config_path.parent.mkdir(exist_ok=True)\n        \n        dev_config = \"\"\"app:\n  name: \"Dev RAG System\"\n  debug: true\n\nllm:\n  provider: \"mock\"\n  model: \"mock-model\"\n\"\"\"\n        \n        with open(dev_config_path, 'w', encoding='utf-8') as f:\n            f.write(dev_config)\n        \n        # 创建生产环境配置\n        prod_config_path = Path(self.temp_dir) / \"config\" / \"production.yaml\"\n        \n        prod_config = \"\"\"app:\n  name: \"Prod RAG System\"\n  debug: false\n\nllm:\n  provider: \"openai\"\n  model: \"gpt-4\"\n\"\"\"\n        \n        with open(prod_config_path, 'w', encoding='utf-8') as f:\n            f.write(prod_config)\n        \n        # 测试开发环境\n        with patch.dict(os.environ, {\"ENVIRONMENT\": \"development\"}):\n            with patch('pathlib.Path.cwd', return_value=Path(self.temp_dir)):\n                loader = ConfigLoader()\n                config = loader.load_config()\n                assert config.app.name == \"Dev RAG System\"\n                assert config.app.debug is True\n                assert config.llm.provider == \"mock\"\n        \n        # 测试生产环境\n        with patch.dict(os.environ, {\"ENVIRONMENT\": \"production\", \"OPENAI_API_KEY\": \"prod-key\"}):\n            with patch('pathlib.Path.cwd', return_value=Path(self.temp_dir)):\n                loader = ConfigLoader()\n                config = loader.load_config()\n                assert config.app.name == \"Prod RAG System\"\n                assert config.app.debug is False\n                assert config.llm.provider == \"openai\"\n